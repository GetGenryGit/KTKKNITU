@page "/select_item/{Type}"
@using System.Text.Json

@inject NavigationManager navigationManger
@inject ILocalStorageService localStorage

<div class="container-search-bar">
    <input type="search" placeholder="Поиск..." @bind="FilterValue" />
</div>


@if (filteredList.Count < 1)
{
    <div class="spinner-container">
        <h3>Не найдено!</h3>
    </div>
}
else
{
    <div class="container-frames">
        @foreach (var item in filteredList)
        {
            <div class="@dictionaryStyleClass" @onclick="async () => await selectValue(item)">
                <h3>@item</h3>
            </div>
        }
    </div>
}


<style>
    .container-search-bar{
        display:flex;
        margin: 20px 30px;
        align-items: center;
        gap: 10px;
    }

        .container-search-bar > input{
            width: 100%;
            height: 50px;
            font-size: 18px;
            background: LightGray;
            border: none;
            border-radius: 35px;
            padding: 1px 15px 1px 15px;
        }

    .container-frames{
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .frame-teacher{
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid rgb(176, 176, 176);
        border-radius: 10px;
        height: 45px;
        width: 100%;
        background-color: white;
        color: black;
        font-size: 18px;
        font-weight: 700;
        padding: 1px 20px 1px 20px;
        margin: 5px;
        box-shadow: 2px 2px 1px 0px rgba(0, 0, 0, 0.25);
    }

    .frame-classroom{
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid rgb(176, 176, 176);
        border-radius: 10px;
        height: 45px;
        width: auto;
        background-color: white;
        color: black;
        font-size: 18px;
        font-weight: 700;
        padding: 1px 20px 1px 20px;
        margin: 7px;
        box-shadow: 2px 2px 1px 0px rgba(0, 0, 0, 0.25);
    }

    .frame-collective{
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid rgb(176, 176, 176);
        border-radius: 10px;
        height: 45px;
        width: auto;
        background-color: white;
        color: black;
        font-size: 18px;
        font-weight: 700;
        padding: 1px 20px 1px 20px;
        margin: 7px;
        box-shadow: 2px 2px 1px 0px rgba(0, 0, 0, 0.25);
    }
</style>



@code {
    [Parameter] public string Type { get; set; }

    private string filterValue;
    public string FilterValue 
    {
        get => filterValue;
        set
        {
            filterValue = value;
            filterListByValue();
        }
    }

    private string dictionaryStyleClass;

    private const string teacherStyle = "frame-teacher";
    private const string classroomStyle = "frame-classroom";
    private const string collectiveStyle = "frame-collective";


    private List<string> list = new List<string>();

    private List<string> filteredList = new List<string>();

    private void filterListByValue()
    {
        if (string.IsNullOrWhiteSpace(FilterValue))
        {
            filteredList = list;
            return;
        }

        filteredList = list.Where(i => i.ToLower().Contains(filterValue.ToLower().Trim())).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        switch (Type)
        {
            case "учителя":
                list = JsonSerializer.Deserialize<List<string>>(await localStorage.GetItemAsStringAsync("teachersList"));
                dictionaryStyleClass = teacherStyle;
                break;
            case "группы":
                list = JsonSerializer.Deserialize<List<string>>(await localStorage.GetItemAsStringAsync("collectivesList"));
                list = list.OrderBy(x => x.Length).ToList();
                dictionaryStyleClass = collectiveStyle;
                break;   
            case "кабинеты":
                list = JsonSerializer.Deserialize<List<string>>(await localStorage.GetItemAsStringAsync("classroomsList"));
                list = list.OrderBy(x => x.Length).ToList();
                dictionaryStyleClass = classroomStyle;
                break;
            default:
                navigationManger.NavigateTo("/", true, true);
                break;
        }

        filteredList = list;
    }

    private async Task selectValue(string item)
    {
        await localStorage.SetItemAsStringAsync("selectedValue", item);
        navigationManger.NavigateTo("/", true, true);
    }
}
