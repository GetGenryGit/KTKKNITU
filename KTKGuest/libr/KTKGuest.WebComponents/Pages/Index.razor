@page "/"

@inject IHttpService httpService
@inject ILocalStorageService localStorage
@inject ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager navigationManager

@using Blazored.SessionStorage;
@using KTKGuest.WebComponents.Services
@using KTKGuest.WebComponents.Data
@using KTKGuest.WebComponents.Constants
@using System.Text.Json
@inherits RefreshablePageBase

<PageTitle>Расписание КТК</PageTitle>

@if (isInitiliazedLoading)
{
    <LoadingScreen></LoadingScreen>
}
else
{
    <div class="sort-tools" disabled="@isBusy.ToString()">
        <input class="sel-date" type="date" id="day"  @bind="SelectedDate" @bind:after="async () => await OnSelectedDateChange()">

        <select class="sel-type" id="type" @bind="SelectedType" @bind:after="async () => await OnSelectedTypeChange()">
            <option value="Группы">Группы</option>
            <option value="Учителя">Учителя</option>
            <option value="Кабинеты">Кабинеты</option>
        </select>

        <input class="sel-value" id="value" type="search" @bind="SelectedValue" @onclick="NavigateSelectValue" readonly />
        @if (SelectedValue != "Не выбрано")
        {
            <div class="clear-value" @onclick=" async () => await ClearValue()">
                Очистить
            </div>
        }
        

    </div>

    <div class="day-of-week">
        <p>
            @char.ToUpper(SelectedDate.ToString("dddd")[0])@SelectedDate.ToString("dddd").Substring(1)
        </p>
        <hr>
    </div>

    @if (isBusy)
    {
        <div class="spinner-container">
            <div class="spinner"></div>
        </div> 
    }
    else if (!isSchedulePublished)
    {
        <div class="spinner-container" style="height: 40vh;">
            <div class="center-notification">
                <img src="https://cdn-icons-png.flaticon.com/512/5394/5394498.png" height="100" width="100" />
                <h2>Расписание ещё не опубликованно!</h2>
            </div>
        </div>
    }
    else
    {
        <ScheduleTables ScheduleList="scheduleList"></ScheduleTables>
    }   
}


@code{
    #region [Properties]
    private const string defaultChoice = "Не выбрано";

    private bool isSchedulePublished = false;

    private DateTime selectedDate = DateTime.Now;
    public DateTime SelectedDate
    {
        get => selectedDate;
        set => selectedDate = value == DateTime.MinValue ? DateTime.Now : value ; 
    }

    private string selectedType = "Группы";
    public string SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value == null ? "Группы" : value;
        }
    }

    private string selectedValue = "Не выбрано";
    public string SelectedValue
    {
        get => selectedValue;
        set
        {
            selectedValue = value == null ? "Не выбрано" : value ;
        }
    }

    private List<string> collectivesList { get; set; }
    private List<string> teachersList { get; set; }
    private List<string> classroomsList { get; set; }

    private bool isBusy { get; set; }

    private bool isInitiliazedLoading { get; set; }

    private ScheduleObj scheduleList { get; set; } = new();
    #endregion

    #region [SecondoryMethods]
    private void LoadingChange(bool state)
        => isBusy = state;
    private async Task GetDictionaries()
    {
        APIResponse responseCollective = await httpService.GET(APIConstants.GetCollectives);
        APIResponse responseTeacher = await httpService.GET(APIConstants.GetTeachers);
        APIResponse responseClassroom = await httpService.GET(APIConstants.GetClassrooms);

        collectivesList = responseCollective.Result 
            ? JsonSerializer.Deserialize<List<string>>(responseCollective.obj.ToString())
            : new List<string> { responseCollective.Message };

        await localStorage.SetItemAsStringAsync(nameof(collectivesList), JsonSerializer.Serialize(collectivesList));

        teachersList = responseTeacher.Result
            ? JsonSerializer.Deserialize<List<string>>(responseTeacher.obj.ToString())
            : new List<string> { responseTeacher.Message };

        await localStorage.SetItemAsStringAsync(nameof(teachersList), JsonSerializer.Serialize(teachersList));

        classroomsList = responseClassroom.Result 
            ? JsonSerializer.Deserialize<List<string>>(responseClassroom.obj.ToString())
            : new List<string> { responseClassroom.Message };

        await localStorage.SetItemAsStringAsync(nameof(classroomsList), JsonSerializer.Serialize(classroomsList));
    }
    private ScheduleObj ConvertScheduleList(ScheduleGet scheduleGet, string typeSchedule, string valueSchedule)
    {
        var scheduleObj = new ScheduleObj();

        if (scheduleGet.StartAt.Count < 1)
        {
            isSchedulePublished = false;
        }
        else
        {
            isSchedulePublished = true;
        }

        if (typeSchedule == "Учителя") // teacher
        {
            if (valueSchedule != "Не выбрано")
            {   
                var scheduleItemObj = new ScheduleItemObj { Title = valueSchedule };
                var scheduleItemTitleList = scheduleGet.ScheduleListData;

                for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                {   
                    var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i], };

                    var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                    if (lessonsIndexList != null)
                    {
                        foreach (var lesson in lessonsIndexList)
                        {
                            if (lesson.SubGroup == 0)
                            {
                                var lessonItem = new ItemObj
                                {   
                                    Title1 = lesson.Collective,
                                    Title2 = lesson.Classroom,
                                    Title3 = lesson.Subject,
                                    SubGroup = lesson.SubGroup,
                                };  

                                lessonContainer.Items.Add(lessonItem);
                            }
                        }
                    }
                    else
                    {
                        lessonContainer.Items.Add(new ItemObj());
                    }

                    scheduleItemObj.LessonItems.Add(lessonContainer);
                }
                scheduleObj.ScheduleItems.Add(scheduleItemObj);
            }
            else
            {
                foreach (var teacher in teachersList)
                {
                    var scheduleItemObj = new ScheduleItemObj { Title = teacher };

                    var scheduleItemTitleList = scheduleGet.ScheduleListData.Where(l => l.Teacher == teacher);

                    for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                    {
                        var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i] };

                        var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                        if (lessonsIndexList != null)
                        {
                            foreach (var lesson in lessonsIndexList)
                            {
                                if (lesson.SubGroup == 0)
                                {
                                    var lessonItem = new ItemObj
                                    {
                                        Title1 = lesson.Collective,
                                        Title2 = lesson.Classroom,
                                        Title3 = lesson.Subject,
                                        SubGroup = lesson.SubGroup,
                                    };
                                    lessonContainer.Items.Add(lessonItem);
                                }
                            }
                        }
                        else
                        {
                            lessonContainer.Items.Add(new ItemObj());
                        }
                        scheduleItemObj.LessonItems.Add(lessonContainer);
                    }
                    scheduleObj.ScheduleItems.Add(scheduleItemObj);
                }   
            }
        }
        else if (typeSchedule == "Группы") // collective
        {
            if (valueSchedule != "Не выбрано")
            {
                var scheduleItemObj = new ScheduleItemObj { Title = valueSchedule };
                var scheduleItemTitleList = scheduleGet.ScheduleListData;

                for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                {
                    var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i] };

                    var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                    if (lessonsIndexList != null)
                    {
                        foreach (var lesson in lessonsIndexList)
                        {
                            var lessonItem = new ItemObj
                            {
                                Title1 = lesson.Subject,
                                Title2 = lesson.Classroom,
                                Title3 = lesson.Teacher,
                                SubGroup = lesson.SubGroup,
                            };  
                            lessonContainer.Items.Add(lessonItem);
                        }
                    }
                    else
                    {
                        lessonContainer.Items.Add(new ItemObj());
                    }
                    scheduleItemObj.LessonItems.Add(lessonContainer);
                }

                scheduleObj.ScheduleItems.Add(scheduleItemObj);
            }
            else
            {
                foreach (var group in collectivesList)
                {
                    var scheduleItemObj = new ScheduleItemObj { Title = group };
                    var scheduleItemTitleList = scheduleGet.ScheduleListData.Where(l => l.Collective == group);

                    for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                    {
                        var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i] };

                        var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                        if (lessonsIndexList != null)
                        {
                            foreach (var lesson in lessonsIndexList)
                            {
                                var lessonItem = new ItemObj
                                {
                                    Title1 = lesson.Subject,
                                    Title2 = lesson.Classroom,
                                    Title3 = lesson.Teacher,
                                    SubGroup = lesson.SubGroup,
                                };
                                lessonContainer.Items.Add(lessonItem);
                            }
                        }
                        else
                        {
                            lessonContainer.Items.Add(new ItemObj());
                        }

                        scheduleItemObj.LessonItems.Add(lessonContainer);
                    }

                    scheduleObj.ScheduleItems.Add(scheduleItemObj);
                }   
            }
        }
        else if (typeSchedule == "Кабинеты") // classroom
        {
            if (valueSchedule != "Не выбрано")
            {
                var scheduleItemObj = new ScheduleItemObj { Title = valueSchedule };

                var scheduleItemTitleList = scheduleGet.ScheduleListData;

                for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                {
                    var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i] };

                    var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                    if (lessonsIndexList != null)
                    {
                        foreach (var lesson in lessonsIndexList)
                        {
                            if (lesson.SubGroup == 0)
                            {
                                var lessonItem = new ItemObj
                                {
                                    Title1 = lesson.Teacher,
                                    Title2 = lesson.Collective,
                                    Title3 = lesson.Subject,
                                    SubGroup = lesson.SubGroup,
                                };

                                lessonContainer.Items.Add(lessonItem);   
                            }
                        }
                    }
                    else
                    {   
                        lessonContainer.Items.Add(new ItemObj());
                    }
                    scheduleItemObj.LessonItems.Add(lessonContainer);
                }
                scheduleObj.ScheduleItems.Add(scheduleItemObj);
            }
            else
            {
                foreach (var classroom in classroomsList)
                {
                    var scheduleItemObj = new ScheduleItemObj { Title = classroom };

                    var scheduleItemTitleList = scheduleGet.ScheduleListData.Where(l => l.Classroom == classroom);

                    for (int i = 0; i < scheduleGet.StartAt.Count; i++)
                    {
                        var lessonContainer = new LessonItemObj { Index = (i + 1), StartAt = scheduleGet.StartAt[i], EndAt = scheduleGet.EndAt[i] };

                        var lessonsIndexList = scheduleItemTitleList.Where(l => l.ClassIndex == (i + 1));

                        if (lessonsIndexList != null)
                        {
                            foreach (var lesson in lessonsIndexList)
                            {
                                if (lesson.SubGroup == 0)
                                {
                                    var lessonItem = new ItemObj
                                    {
                                        Title1 = lesson.Teacher,
                                        Title2 = lesson.Collective,
                                        Title3 = lesson.Subject,
                                        SubGroup = lesson.SubGroup,
                                    };

                                    lessonContainer.Items.Add(lessonItem);   
                                }
                            }
                        }
                        else
                        {
                            lessonContainer.Items.Add(new ItemObj());
                        }

                        scheduleItemObj.LessonItems.Add(lessonContainer);
                    }

                    scheduleObj.ScheduleItems.Add(scheduleItemObj);
                }   
            }
        }   

        return scheduleObj;
    }
    private async Task<APIResponse> GetScheduleAsync(DateTime date, string typeSchedule, string valueSchedule)
    {
        string urlBuild = APIConstants.GetSchedules + $"?date={date.ToString("yyyy-MM-dd")}";

        if (valueSchedule == "Не выбрано")
        {
            urlBuild += $"&filter=0";
        }
        else
        {
            if (typeSchedule == "Учителя")
                urlBuild += $"&filter=1";
            else if (typeSchedule == "Группы")
                urlBuild += $"&filter=2";
            else if (typeSchedule == "Кабинеты")
                urlBuild += $"&filter=3";

            urlBuild += $"&value={valueSchedule}";
        }

        return await httpService.GET(urlBuild);
    }
    private async Task GetSchedules(DateTime dateSelected, string typeSelected, string valueSelected)
    {
        APIResponse scheduleResponse = await GetScheduleAsync(dateSelected, typeSelected, valueSelected);
        scheduleList = ConvertScheduleList(JsonSerializer.Deserialize<ScheduleGet>(scheduleResponse.obj.ToString()) , typeSelected, valueSelected);
    }
    public void NavigateSelectValue()
        => navigationManager.NavigateTo($"/select_item/{selectedType.ToLower()}");
    public async Task ClearValue()
    {
        try
        {
            LoadingChange(true);

            SelectedValue = "Не выбрано";

            await localStorage.RemoveItemAsync(nameof(selectedValue));
            await GetSchedules(SelectedDate, SelectedType, SelectedValue);

            LoadingChange(false);
        }
        catch (Exception ex)
        {
            LoadingChange(false);
#if DEBUG
    toastService.ShowError(ex.Message, "Ошибка");
#else
            toastService.ShowError("Отсутствует соединение с сервером! Пожалуйста обновите страницу или попробуйте позже!", "Ошибка");
#endif
            await Task.Delay(10000);
            await ClearValue();

            toastService.ShowSuccess("Соединение восстановалено!", "Успех");
        }
    }
    #endregion

    #region [OnPropertyChange]
    public async Task OnSelectedDateChange()
    {
        try
        {
            LoadingChange(true);

            await sessionStorage.SetItemAsStringAsync(nameof(selectedDate), selectedDate.ToString());
            await GetSchedules(SelectedDate, SelectedType, SelectedValue);

            LoadingChange(false);
        }
        catch (Exception ex)
        {
            LoadingChange(false);
#if DEBUG
    toastService.ShowError(ex.Message, "Ошибка");
#else
            toastService.ShowError("Отсутствует соединение с сервером! Пожалуйста обновите страницу или попробуйте позже!", "Ошибка");
#endif
            await Task.Delay(10000);
            await OnSelectedDateChange();

            toastService.ShowSuccess("Соединение восстановалено!", "Успех");
        }
    }
    public async Task OnSelectedTypeChange()
    {
        try
        {
            LoadingChange(true);

            SelectedValue = defaultChoice;

            await localStorage.SetItemAsStringAsync(nameof(selectedValue), SelectedValue);
            await localStorage.SetItemAsStringAsync(nameof(selectedType), SelectedType);

            await GetSchedules(SelectedDate, SelectedType, SelectedValue);

            LoadingChange(false);
        }
        catch (Exception ex)
        {
            LoadingChange(false);
#if DEBUG
    toastService.ShowError(ex.Message, "Ошибка");
#else
            toastService.ShowError("Отсутствует соединение с сервером! Пожалуйста обновите страницу или попробуйте позже!", "Ошибка");
#endif
            await Task.Delay(10000);
            await OnSelectedTypeChange();

            toastService.ShowSuccess("Соединение восстановалено!", "Успех");
        }
    }
    #endregion

    #region [MainMethods]
    protected override async Task OnInitializedAsync()
    {
        try
        {
            isInitiliazedLoading = true;

            var dateSession = await sessionStorage.GetItemAsStringAsync(nameof(selectedDate));

            SelectedDate = Convert.ToDateTime(await sessionStorage.GetItemAsStringAsync(nameof(selectedDate)));
            SelectedType = await localStorage.GetItemAsStringAsync(nameof(selectedType));
            SelectedValue = await localStorage.GetItemAsStringAsync(nameof(selectedValue));

            await GetDictionaries();
            await Task.Delay(500);
            
            await GetSchedules(SelectedDate, SelectedType, SelectedValue);
           
            
            isInitiliazedLoading = false; 
        }
        catch (Exception ex)
        {
            isInitiliazedLoading = false; 
#if DEBUG
            toastService.ShowError(ex.Message, "Ошибка");
#else
            toastService.ShowError("Отсутствует соединение с сервером! Пожалуйста обновите страницу или попробуйте позже!", "Ошибка");
#endif
            await Task.Delay(10000);
            await OnInitializedAsync();
            
            toastService.ShowSuccess("Соединение восстановалено!", "Успех");
        }
    }
    #endregion
}
